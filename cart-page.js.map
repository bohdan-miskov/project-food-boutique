{"version":3,"file":"cart-page.js","sources":["../src/tsSections/cart.ts","../src/tsSections/order.ts"],"sourcesContent":["import {\n  getCartFromStorage,\n  handlerDeleteAllProductsFromCart,\n} from '../storage/cartStorage';\nimport {\n  populateCartProductsList,\n  updateCartProductsCountCart,\n} from '../ui/cartRenderer';\nimport { setSumOrder } from '../ui/orderRenderer';\nimport { calculateSumOrder } from '../utils/orderSumCalculator';\n\nconst initializeDeleteAllBtn = () => {\n  const deleteAllBTn = document.querySelector<HTMLButtonElement>(\n    '.cart-products-delete-all-btn'\n  );\n  if (deleteAllBTn) {\n    deleteAllBTn.addEventListener('click', handlerDeleteAllProductsFromCart);\n  }\n};\n\nconst initializeProductsCart = async () => {\n  const productArray = getCartFromStorage();\n  updateCartProductsCountCart(productArray.length);\n  initializeDeleteAllBtn();\n  await populateCartProductsList(productArray);\n  const sum = calculateSumOrder(productArray);\n  setSumOrder(sum);\n};\n\ndocument.addEventListener(\n  'DOMContentLoaded',\n  async () => await initializeProductsCart()\n);\n","import { checkoutOrder } from '../api/productsApi';\nimport {\n  getCartFromStorage,\n  handlerDeleteAllProductsFromCart,\n} from '../storage/cartStorage';\nimport { ProductCartInfo, ProductRequest } from '../types/products';\nimport { openModal } from '../ui/modals';\n\nconst handleOrderSubmit = async (e: Event) => {\n  e.preventDefault();\n  const form = e.target as HTMLFormElement;\n  const data = new FormData(form);\n  const products = getCartFromStorage();\n  const reqProducts = createRequestBody(products);\n  try {\n    const response = await checkoutOrder(\n      reqProducts,\n      data.get('userOrderEmail') as string\n    );\n    const backdrop = document.querySelector(\n      '.order-success-modal-backdrop'\n    ) as HTMLElement;\n    handlerDeleteAllProductsFromCart();\n    openModal(backdrop);\n  } catch {\n  } finally {\n    form.reset();\n  }\n};\n\nconst createRequestBody = (products: ProductCartInfo[]): ProductRequest[] => {\n  return products.map(({ _id, count, price }) => {\n    return {\n      productId: _id,\n      amount: count * price,\n    };\n  });\n};\n\nconst orderForm = document.querySelector<HTMLFormElement>('.order-form');\nif (!orderForm) {\n  throw new Error('Order form is not found.');\n}\norderForm.addEventListener('submit', handleOrderSubmit);\n"],"names":["initializeDeleteAllBtn","deleteAllBTn","handlerDeleteAllProductsFromCart","initializeProductsCart","productArray","getCartFromStorage","updateCartProductsCountCart","populateCartProductsList","sum","calculateSumOrder","setSumOrder","handleOrderSubmit","e","form","data","products","reqProducts","createRequestBody","response","checkoutOrder","backdrop","openModal","_id","count","price","orderForm"],"mappings":"gIAWA,MAAMA,EAAyB,IAAM,CACnC,MAAMC,EAAe,SAAS,cAC5B,+BAAA,EAEEA,GACWA,EAAA,iBAAiB,QAASC,CAAgC,CAE3E,EAEMC,EAAyB,SAAY,CACzC,MAAMC,EAAeC,IACrBC,EAA4BF,EAAa,MAAM,EACxBJ,IACvB,MAAMO,EAAyBH,CAAY,EACrC,MAAAI,EAAMC,EAAkBL,CAAY,EAC1CM,EAAYF,CAAG,CACjB,EAEA,SAAS,iBACP,mBACA,SAAY,MAAML,EAAuB,CAC3C,ECxBA,MAAMQ,EAAoB,MAAOC,GAAa,CAC5CA,EAAE,eAAe,EACjB,MAAMC,EAAOD,EAAE,OACTE,EAAO,IAAI,SAASD,CAAI,EACxBE,EAAWV,IACXW,EAAcC,EAAkBF,CAAQ,EAC1C,GAAA,CACF,MAAMG,EAAW,MAAMC,EACrBH,EACAF,EAAK,IAAI,gBAAgB,CAAA,EAErBM,EAAW,SAAS,cACxB,+BAAA,EAE+BlB,IACjCmB,EAAUD,CAAQ,CAAA,MACZ,CAAA,QACN,CACAP,EAAK,MAAM,CACb,CACF,EAEMI,EAAqBF,GAClBA,EAAS,IAAI,CAAC,CAAE,IAAAO,EAAK,MAAAC,EAAO,MAAAC,MAC1B,CACL,UAAWF,EACX,OAAQC,EAAQC,CAAA,EAEnB,EAGGC,EAAY,SAAS,cAA+B,aAAa,EACvE,GAAI,CAACA,EACG,MAAA,IAAI,MAAM,0BAA0B,EAE5CA,EAAU,iBAAiB,SAAUd,CAAiB"}